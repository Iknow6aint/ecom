const express = require("express");
// const { resetWatchers } = require("nodemon/lib/monitor/watch");
const cartsRepo = require('../repositories/cart')
const productRepo = require('../repositories/products')
const cartShowTemplate =require('../views/carts/show')
const router = express.Router();

//Recive a post request to add item to cart
router.post('/cart/products',async (req,res) =>{
    //Figure out the cart
    let cart;
    if(!req.session.cartId){
        //we dont hae a cart we need to create one
        //and store the cart id on the req.session.cartid
        //property
         cart = await cartsRepo.create({items: []})
        req.session.cartId = cart.Id;
    }else{
        //we have a cart,Lets get it from the repository
         cart = await cartsRepo.getOne(req.session.cartId)
    }

    // console.log(cart)
    //Either increment quantity for existing product
    const existingItem = cart.items.find(item => item.id === req.body.productId)

    if (existingItem) {
        //increment quantity and save cart
        existingItem.quanity++
    } else {
        //add new product id to items array
        cart.items.push({id: req.body.productId, quantity: 1})
    }

    await cartsRepo.update(cart.id, {
        items: cart.items
    });
    //OR and new product to items array

    res.send('Product added to cart')
});
//Recive a get request to show all items in cart
router.get('/cart', async(req,res) => {
    if (!req.session.cartId) {
        return res.redirect('/')
    }

    const cart = await cartsRepo.getOne(req.session.cartId);

    for (let item of cart.items){
        const product = await productRepo.getOne(item.Id);

        item.product= product;
    }

    res.send(cartShowTemplate({ items: cart.items}))
})

//Recive a post request to delete an item from cart

module.exports = router;